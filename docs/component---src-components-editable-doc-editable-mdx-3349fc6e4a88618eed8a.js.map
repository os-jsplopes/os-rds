{"version":3,"sources":["webpack:///../src/components/Editable/doc/Editable.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Editable","UsageWithInput","UsageWithTextArea","of","isMDXComponent"],"mappings":"4gBASO,IAAMA,EAAe,Q,0NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,YADR,YAGA,8OAEA,iBAAQ,CACN,GAAM,cADR,cAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,oqBA6BL,iBAAQ,CACN,GAAM,YADR,YAGA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAgBD,QAAQ,mBACxB,iBAAQ,CACN,GAAM,iBADR,iBAGA,YAAC,IAAD,CAAmBA,QAAQ,sBAC3B,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,cAAeC,QAAS,CACzDL,QACAH,kBACAS,eACAC,UACAC,aACAC,mBACAC,uBACCT,QAAQ,cACX,yBAEA,iBAAQ,CACN,GAAM,OADR,OAGA,YAAC,IAAD,CAAOU,GAAIH,IAAUP,QAAQ,gB,wNAKjCH,EAAWc,gBAAiB","file":"component---src-components-editable-doc-editable-mdx-3349fc6e4a88618eed8a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/Github/os-jsplopes/os-rds/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from \"docz\";\nimport Editable from \"../Editable\";\nimport { UsageWithInput, UsageWithTextArea } from \"./DocExamples\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"editable\"\n    }}>{`Editable`}</h1>\n    <p>{`This component control the inline edition for the element passed as child. The element(s) passed as children only will be visible\nwhen are in edit mode after edition the value will be displayed by this component.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-use\"\n    }}>{`How to use`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Editable } from \"@outsystemsui\";\n\nconst MyEditableInputComponent = () => {\n    const inputRef = useRef();\n    const [task, setTask] = useState(\"\");\n\n    return (\n        <Editable\n            text={task}\n            placeholder=\"Write a task name\"\n            childRef={inputRef}\n            type=\"input\"\n        >\n            <input\n                ref={inputRef}\n                type=\"text\"\n                name=\"task\"\n                placeholder=\"Write a task name\"\n                value={task}\n                onChange={e => setTask(e.target.value)}\n            />\n        </Editable>\n    );\n};\n\nexport default MyEditableComponent;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"with-input\"\n    }}>{`With Input`}</h3>\n    <UsageWithInput mdxType=\"UsageWithInput\" />\n    <h3 {...{\n      \"id\": \"with-textarea\"\n    }}>{`With TextArea`}</h3>\n    <UsageWithTextArea mdxType=\"UsageWithTextArea\" />\n    <h2 {...{\n      \"id\": \"playground\"\n    }}>{`Playground`}</h2>\n    <Playground __position={2} __code={'<div></div>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Editable,\n      UsageWithInput,\n      UsageWithTextArea\n    }} mdxType=\"Playground\">\n    <div></div>\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <Props of={Editable} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}